# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TrackInCart {
  id: Int!
  title: String!
  link: String
  preview: String
  price: String!
  dateAdded: String!
}

"""Extension of the Album type from content microservice"""
type AlbumInCart {
  id: Int!
  title: String!

  """URL to deezer's cover image"""
  cover: String
  tracksInCart: [TrackInCart!]!
  subtotal: String!
}

"""Extension of the Artist type from content microservice"""
type ArtistInCart {
  id: Int!
  name: String!
  picture: String
  albumsInCart: [AlbumInCart!]!
  subtotal: String!
}

type Cart {
  id: ID!
  total: String!

  """
  Tracks in cart grouped by artist and album. This exists to ease the computation of subtotal prices (exact currency operations must be done in backend)
  """
  artistsInCart: [ArtistInCart!]!

  """Tracks in cart. (Flat array, data is not grouped)"""
  tracksInCart: [TrackInCart!]!
}

type Billing {
  name: String!

  """Address line 1"""
  address1: String!

  """Address line 2"""
  address2: String

  """ISO 3166 alpha-2 country code"""
  country: String!
  state: String!

  """Zip code"""
  zipCode: String!
  email: String!
}

type Purchase {
  id: ID!

  """ISO-8601 formatted date"""
  purchaseDate: String!
  cart: Cart!

  """Email registered in billing information when purchase was completed"""
  email: String!
  billing: Billing!
}

type Query {
  cart: Cart
  purchases: [Purchase!]
  purchase(id: ID!): Purchase
}

type Mutation {
  """
  Add tracks to the user cart. Returns the updated cart or null if at least one track id was invalid (or it was already in cart)
  """
  addTracks(ids: [ID!]!): Cart

  """Delete tracks on user's cart. Returns the updated cart"""
  deleteTracks(ids: [ID!]!): Cart!

  """Add all album's tracks to cart"""
  addAlbums(ids: [ID!]!): Int!

  """Add all artist's tracks to cart"""
  addArtists(ids: [ID!]!): Int!

  """
  Purchase the user's shopping cart. Returns the shopping cart on success or null on failure
  """
  purchase(details: PurchaseInput!): Cart
}

input PurchaseInput {
  payment: PaymentInput!
  billing: BillingInput!
}

input PaymentInput {
  """Field is ignored. You can assign an empty string"""
  cardNumber: String!

  """Field is ignored. You can assign an empty string"""
  cardHolderName: String!

  """Field is ignored. You can assign an empty string"""
  country: String!

  """Field is ignored. You can assign an empty string"""
  zipCode: String!

  """
  ISO-8601 formatted date. Field is ignored. You can assign an empty string
  """
  expirationDate: String!

  """Field is ignored. You can assign 0"""
  cvv: Int!
}

input BillingInput {
  name: String!

  """Address line 1"""
  address1: String!

  """Address line 2"""
  address2: String

  """ISO 3166 alpha-2 country code"""
  country: String!
  state: String!

  """Zip code"""
  zipCode: String!
  email: String!
}